concept,description
color mapping,"In the input, you will see a grid of colored pixels containing various colors. The output should be a grid that replaces each color in the input grid with a predetermined new color according to the following mapping: black -> red, blue -> green, red -> yellow, yellow -> blue, purple -> orange, orange -> pink, green -> brown, brown -> grey, grey -> black, and pink -> purple."
reflection,"In the input, you will see a grid of colored pixels with various colors arranged in a random pattern. The output should be a grid where each row of the input grid is reversed, showcasing a reflection of the input along the vertical axis. For instance, if the first row of the input is red, blue, green, the first row of the output should be green, blue, red."
rotation,"In the input, you will see a grid of colored pixels. The output should be a grid that represents the input grid rotated 180 degrees, transforming the top of the grid to the bottom and vice versa, as well as reversing left to right."
symmetry,"In the input, you will see a grid of colored pixels that is not symmetric. The output should transform the input grid such that it becomes symmetric with respect to its vertical centerline. This means that each pixel on the left side of the grid will have an identical pixel on the right side, thus creating a mirror image across the vertical axis."
translation,"In the input, you will see a grid of colored pixels with a distinct colored shape positioned in one corner. The output grid should be the same as the input grid except that the colored shape should be shifted two spaces to the right and one space down."
selection,"In the input, you will see a grid of colored pixels with a random arrangement of colors. The output should be a grid that only includes the pixels from the input grid that are colored blue, effectively selecting only the blue pixels from the initial arrangement. Any other color pixel in the output grid should be represented in the output as black, creating a contrast that highlights the selected colors."
inversion,"In the input, you will see a grid of colored pixels that contains various colors. The output should be a grid where every color is replaced with its complementary color. For example, black becomes white, blue becomes yellow, red becomes cyan, and so forth. The transformation should illustrate the concept of color inversion vividly."
radiation,"In the input, you will find a grid representing a colored circle centered in the middle of the grid, with pixels radiating outward in a gradient of colors from the center. The output should be a grid where each pixel's color is transformed to the color of the closest edge pixel in the same row or column, simulating the effect of radiation spreading outward from the center."
upscaling,"In the input, you will see a small grid of colored pixels, specifically a 2x2 grid containing colors arranged in various configurations. The output should be a larger grid formed by upscaling the input grid by a factor of 2, where each pixel in the input grid is represented as a 2x2 block of the same color in the output grid, effectively enlarging the patterns while maintaining the color arrangement."
downscaling,"In the input, you will see a grid of colored pixels with varying colors. The output should be a smaller grid that represents a downscaled version of the input grid, where each group of four adjacent pixels (2x2) in the input is represented by a single pixel in the output. The color of the output pixel should be determined by the dominant color in the corresponding 2x2 area of the input grid. If there is a tie in dominant colors, choose the first color that appears according to a predetermined color order."
growth,"In the input, you will see a grid of colored pixels where some areas are filled with green, representing grass, and others are black, representing bare soil. The output should be a grid where each green pixel expands to its neighboring pixels (up, down, left, right), changing any adjacent black pixels to green, simulating the growth of grass into surrounding areas."
shrinkage,"In the input, you will see a grid of colored pixels that contains a pattern of shapes, such as a colored square or rectangle, surrounded by empty space. The output should be a smaller version of the input grid, where the original shape is shrunk to half its original dimensions, maintaining its position in the grid and scaling down the colors proportionally, while the surrounding empty space remains unchanged."
bounding box,"In the input, you will see a grid of colored pixels with various colors spread throughout. The output should be a grid where the colored pixels are replaced by a single bounding box defined by the outermost edges of the colored pixels. This bounding box should be outlined in red, while the area outside the box remains unchanged in color."
insertion,"In the input, you will see a grid of colored pixels with a pattern including various colors. The output grid should be the same as the input grid, but with a new row of blue pixels inserted directly above the first row of the grid and all other rows shifted down accordingly."
jigsaw,"In the input, you will see a grid of colored pixels composed of several irregular shapes resembling jigsaw puzzle pieces, each filled with different colors. The output should be a rearranged version of the input grid, where each jigsaw piece is relocated to fit perfectly together without any gaps or overlaps, forming a larger square or rectangular shape with a unified color pattern."
ray tracing,"In the input, you will see a grid of colored pixels representing a simple scene with colored objects like a red circle and a blue square placed against a grey background. The output grid should depict the scene as if light rays are shining from a point source (e.g., a yellow pixel in one corner) and reflecting off the edges of the objects. Each object's surface should be shaded based on the angle of reflection, creating light and dark areas according to how the light interacts with the shapes in the grid."
bouncing,"In the input, you will see a colorful grid containing a pattern of pixels that features a diagonal line of colored squares. The output grid should show the transformed pattern where each colored pixel that is above the diagonal line in the input moves downwards to the first available empty position below, while maintaining the horizontal position. Any colored pixel that is originally below the diagonal line will remain unaffected. This transformation will illustrate the concept of 'bouncing' as colored pixels find their new positions based on the diagonal boundary."
filling,"In the input, you will see a grid containing an L-shaped outline where the outer edge is colored green and the inside is colored white. The output grid should be the same as the input grid, except the inside of the L-shape should be completely filled with green."
occlusion,"In the input, you will see a grid of colored pixels where some pixels are colored black to represent objects occluding others. The output should be a grid displaying the colors of the objects that are not obscured by the occluding black pixels. Essentially, this transformation reveals what is visible in the grid without the occlusion."
repetition,"In the input, you will see a grid of colored pixels where a specific pattern of colors is repeated throughout the grid. The output should be a grid that contains only the first occurrence of the pattern, removing any subsequent repetitions."
grouping,"In the input, you will see a grid of colored pixels that are randomly arranged. The output should group the same colored pixels together in contiguous blocks, preserving their relative order from the input. For instance, if you have red, blue, and green pixels spread out, the output will consist of larger blocks of red, blue, and green adjacent to each other."
counting,"In the input, you will see a grid of colored pixels where each pixel represents a distinct object or element and every object is either a blue square or a red square. The output should be a grid that displays the total count of blue squares in each row, represented by the color green for every blue square counted in that row. Rows with zero blue squares should be represented with yellow squares instead."
swapping,"In the input, you will see a grid of colored pixels where pairs of adjacent pixels are colored differently. The output should be a grid where every pair of adjacent pixels (both horizontally and vertically) has been swapped with their neighbors. For example, if two adjacent pixels are blue and red, blue will take the place of red and vice versa."
object identification,"In the input, you will see a grid of colored pixels that form a distinct shape, such as a square, triangle, or circle. The output grid should indicate the identified shape by filling the pixels that belong to the shape with a specific color (e.g., green) while leaving the rest of the pixels in their original colors. For instance, if the shape is a triangle formed by red pixels, the output will fill those red pixels with green, clearly identifying the triangle."
object selection,"In the input, you will see a grid filled with various colored shapes including squares and circles. The output should simply be a grid that retains only the colored squares from the input grid, while all other pixels become black. This will demonstrate the ability to select and filter specific objects based on their shape."
subgrid selection,"In the input, you will see a grid of colored pixels with a defined selection area marked by a solid black border. The output grid should consist of the pixels contained within the border of the selection area, with the rest of the grid turned into a single background color, such as grey."
accretion,"In the input, you will see a grid of colored pixels with a small shape made of one color, such as blue, surrounded by the background color, which is black. The output grid should show the same shape as the input but expanded, with each pixel of the shape growing by adding an additional layer of the same color around it. For example, if the shape is a single blue pixel, it will transform into a plus-sign-like shape expanding outwards by one pixel in all directions, while the surrounding background remains unchanged."
ablation,"In the input, you will see a grid of colored pixels representing a random design made up of various colors against a black background. The output grid will be derived from the input grid by removing all pixels of one specific color (for example, red), leaving only the remaining colors intact. This demonstrates the concept of ablation by visually representing the deletion or stripping away of a color from the design."
shearing,"In the input, you will see a grid of colored pixels arranged in various vertical columns. The output grid should maintain the original height and color of each pixel but should shift the colors horizontally. Each row in the input grid will be transformed so that the color of each pixel in that row is shifted one place to the right, with the last pixel wrapping around to the first position in that row."
skewing,"In the input, you will see a grid of colored pixels that contains a shape, such as a square or a rectangle, filled with blue and bordered in black. The output should be a grid where that shape has been skewed horizontally, meaning that its top edge is shifted to the right while keeping the bottom edge in place, creating a parallelogram instead of a rectangle. The colors should remain the same."
warping,"In the input, you will see a grid of colored pixels that contains a pattern of alternating colors in a checkerboard layout. The output should be a distorted version of the input grid, where the colors are warped in a wavy manner, simulating a rippling effect across the grid. This transformation should demonstrate how the original arrangement of colors changes through the warping process."
morphing,"In the input, you will see a grid of colored pixels displaying a series of shapes, such as a triangle, square, and circle, each occupying different areas of the grid. The output should transform the input shapes into a smooth morphing sequence, turning them seamlessly from one shape to another, while maintaining the same colors in the corresponding regions. For example, the triangle morphs into a square and then into a circle."
blurring,"In the input, you will see a grid of colored pixels with distinct blocks of colors. The output grid should be the result of blurring the input, where each pixel takes on the average color of its surrounding pixels (including itself) in a 3x3 neighborhood. The colors should blend, making the grid appear softer and less defined."
sharpening,"In the input, you will see a grid of colored pixels representing an image with blurred edges. The output grid should be a sharpened version of the input, where the colors of adjacent pixels at the edges become more distinct. For instance, if an edge contains colors like blue and grey, the output should show those colors more sharply defined, potentially introducing a contrasting color like black to highlight the edge."
masking,"In the input, you will see a grid of colored pixels where certain areas are colored black, indicating the mask, while other areas are filled with various colors. The output grid should only show colors where the mask is not black, effectively revealing only the non-masked areas of the input grid and turning masked pixels to white."
compositing,"In the input, you will see two overlapping grids of colored pixels. The first grid will have a blue rectangle in the center and the second grid will have a red circle that overlaps with the blue rectangle. The output grid should show the combined result of these two grids, applying a compositing rule where the overlapping area takes on the color purple, which is the result of mixing blue and red. Areas that are only blue will remain blue, and areas that are only red will remain red."
filtering,"In the input, you will see a grid of colored pixels with a mix of different colors. The output grid should retain only the blue and green pixels from the input while removing all other colors. Every blue or green pixel should stay in the same position, while all non-blue and non-green pixels should be replaced with black."
colorization,"In the input, you will see a grid of colored pixels where all pixels are black except for a pattern that consists of a few pixels colored blue. The output grid should be the same size as the input but all the pixels that were blue in the input should now be turned into red, while all other pixels remain black."
dithering,"In the input, you will see a grid of colored pixels containing various colors arranged in patterns. The output should be a grid where each pixel in the input grid is replaced with a 2x2 block of pixels of four colors, creating a dithered effect. Each color in the 2x2 block will vary based on the original pixel color: for example, if a pixel is red, it can turn into a random pattern made up of red, pink, orange, and grey to give the appearance of shading."
pixelating,"In the input, you will see a grid of colored pixels with various colors arranged randomly. The output should be a smaller grid where each color in the input grid is represented by a single color block comprised of the same color. The size of the output grid will be determined by grouping every 2x2 pixels from the input grid into a single pixel in the output grid, thus creating a pixelated effect."
tiling,"In the input, you will see a grid of colored pixels with different colored squares arranged in small blocks. The output grid should consist of the same colors arranged in a regular tessellation pattern, where each block is repeated to fill the entire grid uniformly with these colors."
tesselation,"In the input, you will see a grid filled with a simple pattern of alternating colored squares, such as a checkerboard made up of red and blue squares. The output should show a completely tiled grid where the same colors are used, creating a continuous and non-overlapping covering across the entire grid. Each color square should seamlessly align with adjacent squares, demonstrating the concept of tessellation."
convolution,"In the input, you will see a grid of colored pixels that represents a simple grayscale image where each color corresponds to a different intensity. The output grid should be a result of applying a 3x3 averaging filter to the input grid, where each pixel in the output grid is calculated by taking the average of the colors of the surrounding pixels in the input grid, including itself."
circumscription,"In the input grid, you will see a collection of randomly colored pixels arranged in an irregular shape, similar to a blob. The output grid should show the same shape but with the addition of a thin black outline that circumscribes the irregular shape, effectively creating a border around it. The inner colors of the blob remain unchanged."
inscription,"In the input, you will see a grid of colored pixels containing a simple geometric shape, such as a square, rectangle, or circle, surrounded by a colored border. The output should be a grid that retains the shape of the original but replaces the border color with a different color (e.g., from blue to red) while keeping the internal region unchanged. This demonstrates the idea of 'inscription' by modifying the boundary of the shape."
path finding,"In the input, you will see a grid of colored pixels where one color represents the starting point (green) and another color represents the endpoint (red), with obstacles represented by black pixels scattered throughout the grid. The output should be a grid where a valid path of yellow pixels connects the starting point to the endpoint, avoiding the black obstacles."
gravity,"In the input, you will see a grid of colored pixels filled with various colors at random positions. The output should be a grid where all the colored pixels have fallen to the bottom of the grid, effectively simulating the effect of gravity. Any empty spaces above should remain empty, creating a 'falling' effect for the colored pixels."
shape mapping,"In the input, you will see a grid of colored pixels forming various shapes made up of different colors. The output should be a grid where each shape in the input grid is transformed into a corresponding shape of a different size: shapes that are 2x2 pixels in the input become 3x3 pixels in the output, shapes that are 3x3 pixels become 4x4 pixels, and so on, maintaining the color of each shape."
collision,"In the input, you will see a grid of colored pixels with several distinct colored squares scattered throughout. The output grid should illustrate the concept of collision by combining overlapping squares into a new color. For instance, if a red square overlaps with a blue square, the overlapping area should change to purple in the output grid. The rest of the grid should remain unchanged."
stacking,"In the input, you will see a grid of colored pixels with random colored blocks stacked vertically. The output grid should be a new grid where each column of colored blocks is shifted down to fill the lowest available spaces, simulating the effect of gravity and stacking the colors on top of each other in a neat manner."
nesting,"In the input, you will see a grid of colored squares, starting with a large blue square in the center, surrounded by a yellow square, then a red square, and finally a green square on the outer edge. The output should be a grid where the colors are nested in the same pattern, but each square in the outer layer is filled with black, giving the illusion of depth while maintaining the full shapes of the colorful squares inside."
squeezing,"In the input, you will see a grid of colored pixels arranged in a rectangular shape. The output should be a grid that compresses the input grid by removing alternating rows, effectively squeezing the height of the grid by half, while maintaining the same width and keeping the colors of the remaining rows intact."
centering,"In the input, you will see a grid of colored pixels containing an irregular shape made of blue and red pixels situated in one corner of the grid. The output should be a grid where the shape is 'centered' within the grid by shifting it horizontally and vertically so that it occupies the same relative position to the new grid center, with any empty space filled in with black pixels."
count mapping,"In the input, you will see a grid of colored pixels with various colors arranged randomly. The output should be a grid where each colored pixel from the input is replaced by a number indicating the count of that specific color in the entire input grid. For example, if there are 3 blue pixels in the input, each blue pixel in the output will be replaced with the number 3, while other colors will be replaced with their respective counts."
stretching,"In the input, you will see a grid of colored pixels arranged in a rectangular shape. The output should be a grid where the height of the input grid is doubled while maintaining the same width. Each colored pixel in the input grid will appear in two consecutive rows in the output grid, effectively stretching the grid vertically."
compression,"In the input, you will see a grid of colored pixels containing scattered colors. The output should be a compressed version of the input grid, where every 2x2 block of pixels in the input grid is represented by a single pixel in the output grid. The color of the output pixel should be the most frequently occurring color in that 2x2 block. If there is a tie, choose the color that appears first in the defined color order: black, blue, red, yellow, purple, orange, green, brown, grey, pink."
expansion,"In the input, you will see a grid of colored pixels where a single color forms an X shape in a 5x5 area, with the center pixel being that color. The output grid should expand the X shape outward by one pixel in all directions, creating a larger X shape and filling the additional areas with the same color."
falling,"In the input, you will see a grid of colored pixels representing various shapes resting on a line at the bottom of the grid. The output grid should show these shapes 'falling' down in the grid; specifically, any pixels that are not in the bottommost row should move down to the next available space, leaving any empty spaces above them intact. This creates the visual representation of the shapes being pulled downward."
attraction,"In the input, you will see a grid of colored pixels with two distinct shapes made up of different colors. The shapes should be positioned apart from each other within the grid. The output should be a grid where the colors from both shapes combine to form a new color in the pixels that are adjacent to the borders of the shapes, illustrating the concept of attraction by visually blending the colors at their edges."
repulsion,"In the input, you will see a grid of colored pixels containing a cluster of colored pixels in the center. The output grid should be derived from the input by moving each colored pixel away from the center of the cluster by one pixel in all cardinal directions, creating a visual effect of the pixels being repelled from one another. If a colored pixel is already at the edge of the grid, it should stay in its position."
fractality,"In the input, you will see a grid containing a simple pattern made of repeated shapes, such as three green squares arranged in a triangular formation. The output grid should show a similar pattern where each shape is replaced with a smaller copy of the entire original pattern, maintaining the same arrangement. This illustrates the concept of fractality by demonstrating how the same structure repeats at different scales."
rotational symmetry,"In the input, you will see a grid of colored pixels arranged in a circular pattern with a defined center point. The output grid should be the same pattern rotated 180 degrees around the center point, showing how the colors appear in their reflected positions, thus exhibiting rotational symmetry."
translational symmetry,"In the input, you will see a grid of colored pixels with a pattern of colored squares arranged in a specific design. The output should be a grid that displays the same pattern but translated two pixels to the right and one pixel down from its original position."
arithmetic,"In the input, you will see a grid of colored pixels where each color represents a unique number from 1 to 10, with the colors arranged in two equal-sized rectangles. The output should be a grid where the colors in the second rectangle are replaced by their corresponding colors representing the sum of both rectangles, resulting in new color combinations that visually indicate arithmetic addition."
addition,"In the input, you will see a grid of colored pixels divided into two distinct sections. The left half will be filled with one color (for example, red) while the right half will be filled with another color (for example, blue). The output grid should combine these two colors based on their overlap, resulting in a grid where the colors blend at the boundary, producing a third color (like purple) in the overlapping area and maintaining the original colors in the non-overlapping sections."
subtraction,"In the input, you will see a grid of colored pixels with a mixture of colors. The output should be a grid that reflects the result of subtracting all instances of a specific color (e.g., blue) from the input grid, leaving the remaining colors intact. For example, if the input grid has blue pixels scattered throughout, the output grid will be the same as the input grid but without any blue pixels, effectively demonstrating the concept of subtraction."
fracturing,"In the input, you will see a grid of colored pixels forming an image of a simple shape, such as a circle or square. The output should be a grid where the shape is 'fractured' into several smaller rectangles or triangles, each filled with the same color as the original shape. The fractured pieces should remain within the boundary of the original shape, but their arrangement should appear jumbled or disorganized, demonstrating the concept of fracturing."
cutting,"In the input, you will see a grid of colored pixels containing a shape defined by a specific color, such as blue, surrounded by a different color. The output should consist of two separate grids that represent the result of cutting the shape in half vertically down the middle. One output grid will show the left half of the shape while the other will show the right half, maintaining the original colors of the pixels."
splitting,"In the input, you will see a grid of colored pixels containing a single horizontal band of blue pixels across the middle row, bordered above and below by black pixels. The output should be a grid that takes the two rows directly above and below the blue band and shifts them up into the rows from which they were removed, effectively splitting the blue band into two separate rows in the output grid, with the space between them now filled with black."
fusion,"In the input, you will see two overlapping squares, one red and one blue, separated by a couple of pixels. The output grid should show a new square that is the fusion of the two colors where they overlap, resulting in a purple square that covers the area of the overlap and retains the original red and blue colors in their respective non-overlapping areas."
attachment,"In the input, you will see a grid with two separate colored shapes: a blue square located in the top left corner and a red circle positioned in the center. The output grid should show the blue square and red circle securely 'attached' to one another, appearing as a single, combined shape, with no overlap or gaps, maintaining their original colors."
detachment,"In the input, you will see a grid of colored pixels containing a large square of blue pixels at the center and small clusters of red pixels at various corners. The output grid should show the original blue square, but with the red pixel clusters removed (detached), leaving a grid where only the blue area remains intact, clearly illustrating the process of detachment."
truncation,"In the input, you will see a grid of colored pixels representing a colorful shape that extends beyond a certain boundary. The output should be a grid that contains only the portion of the input shape that lies within a specified rectangular area, effectively truncating the shape at the boundaries of this rectangle. For instance, if the specified boundaries are between coordinates (2,2) and (5,5), only the pixels within those coordinates should be kept, while the rest of the pixels are removed."
