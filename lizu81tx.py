from arc.core import Concept
import numpy as np
from arc.core import Color, Grid

id = "lizu81tx"

concepts = [Concept.SWAPPING]

description = """In the input, you will see a 4x4 grid of colored pixels. The colors can be any of the 10 valid
colors. The output should be generated by swapping the colors of the pixels in the following manner:
for every pixel in an even row (0, 2), swap its color with the pixel directly below it in the odd
row (1, 3). If a pixel is in the last row and has no pixel below it, it remains unchanged. All other
pixels remain the same in the output."""


def generate_input() -> Grid:
    """
    Create a random valid input grid of size 4x4 with random colors.

    Returns:
        Grid: A 4x4 grid filled with random colors from the Color enum.
    """
    # Define the grid size
    grid_size = (4, 4)

    # Create a random grid with colors from the Color enum
    random_grid = np.random.choice(list(Color), size=grid_size)

    return random_grid


def solve(input: Grid) -> Grid:
    """
    Solve the puzzle by swapping colors in the specified manner.

    For every pixel in an even row (0, 2), swap its color with the pixel directly below it
    in the odd row (1, 3). Pixels in the last row remain unchanged.

    Args:
        input (Grid): The input grid to be transformed.

    Returns:
        Grid: The transformed output grid.
    """
    # Create a copy of the input grid to avoid modifying it directly
    output = input.copy()

    # Iterate over even rows (0 and 2)
    for row in range(0, 4, 2):
        for col in range(4):
            # Check if there is a pixel below in the odd row
            if row + 1 < 4:
                # Swap the colors
                output[row, col], output[row + 1, col] = (
                    output[row + 1, col],
                    output[row, col],
                )

    return output
